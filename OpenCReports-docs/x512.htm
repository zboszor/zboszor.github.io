<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>Constants</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="OpenCReports Manual"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Expressions in OpenCReports"
HREF="c491.htm"><LINK
REL="PREVIOUS"
TITLE="Introduction"
HREF="x493.htm"><LINK
REL="NEXT"
TITLE="Identifiers"
HREF="x546.htm"></HEAD
><BODY
CLASS="sect1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>OpenCReports Manual</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x493.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 3. Expressions in OpenCReports</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x546.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="constants"
>Constants</A
></H1
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="stringliterals"
>String literals</A
></H2
><P
>&#13;				String literals in OpenCReports can be either single or double quoted.
				Some examples:
				<PRE
CLASS="programlisting"
>&#13;"apple"
&#8217;apple&#8217;
"I&#8217;ve eaten an apple"
&#8217;This an "apple".&#8217;
				</PRE
>
				The values of these strings are:
				<PRE
CLASS="programlisting"
>&#13;apple
apple
I&#8217;ve eaten an apple
This an "apple".
				</PRE
>
				We can see how the other quoting character can be used as part
				of the string value.
			</P
><P
>&#13;				String literals can also use BASIC language style double quoting
				to embed a single quoting character used for quoting the string
				itself:
				<PRE
CLASS="programlisting"
>&#13;&#8217;apple&#8217;&#8217;&#8217;
&#8217;apple&#8217;&#8217;pear&#8217;
&#8217;apple&#8217;&#8217;&#8217;&#8217;pear&#8217;
"apple"""
"apple""pear"
"apple""""pear"
				</PRE
>			
				The values of these strings are:
				<PRE
CLASS="programlisting"
>&#13;apple&#8217;
apple&#8217;pear
apple&#8217;&#8217;pear
apple"
apple"pear
apple""pear
				</PRE
>
			</P
><P
>&#13;				String literals can also use C language string continuation if
				there's at least one whitespace character (space, TAB or new line)
				between doubled quoting characters. String continuation can also
				switch quoting characters without whitespace between quoting.
				<PRE
CLASS="programlisting"
>&#13;"apple" "pear"
"apple" &#8217;pear&#8217;
"apple"&#8217;pear&#8217;
				</PRE
>
				The value of all these strings is:
				<PRE
CLASS="programlisting"
>&#13;applepear
				</PRE
>
			</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="numericconstants"
>Numeric constants</A
></H2
><P
>&#13;				Numeric values in OpenCReports are handled with GNU MPFR with
				arbitrary precision, by default 256 bits. This allows for
				very high precision, i.e. very long numbers. This is good
				for directly using e.g. arbitrary precision
				<TT
CLASS="literal"
>numeric</TT
> type columns from PostgreSQL.
			</P
><P
>&#13;				Numeric constants can be integer or fractional numbers with or
				without the so called <I
CLASS="emphasis"
>e-notation</I
> or
				scientific notation. Some examples:
				<PRE
CLASS="programlisting"
>&#13;1
1.234
1e4
1e-4
1.234e-5
				</PRE
>
				E-notation means that that number preceding the letter "e" or
				"E" is multiplied by ten to the power of the number after the
				letter "e" or "E", the latter being an integer value. The
				values of the above examples are:
				<PRE
CLASS="programlisting"
>&#13;1
1.234
10000
0.0001
0.00001234
				</PRE
>
			</P
><P
>&#13;				Numbers greater than 0 and less than 1 can be written with
				or without the leading zero.
				<PRE
CLASS="programlisting"
>&#13;0.123
.123
				</PRE
>
			</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="boolconstants"
>Boolean constants</A
></H2
><P
>&#13;				Boolean constants evalutate to numeric constans
				<TT
CLASS="literal"
>1</TT
> and <TT
CLASS="literal"
>0</TT
>.
				The boolean constants are:
				<PRE
CLASS="programlisting"
>&#13;yes
no
true
false
				</PRE
>
			</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="datetimeconstants"
>Datetime constants</A
></H2
><P
>&#13;				There are no datetime constants per se, although expressions
				like <TT
CLASS="literal"
>stodt('1980-06-30 16:00:00')</TT
> (i.e.
				function calls with constant arguments that result in a
				<TT
CLASS="literal"
>datetime</TT
> value) implicitly turn into
				constants through expression optimization.
			</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x493.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x546.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Introduction</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c491.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Identifiers</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>